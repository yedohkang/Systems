1/17/18

Aim: Cisco in an hour IV: A New Hope

Transport Layer
- computer to computer connection over a network
- unconcerned with the individual hops of layer 3 traffic
- network ports are used at the transport layer
- TCP and UDP are transport layer protocols

Application Layer
- everything else

Data Encapsulation
- as data crosses from an upper layer to a lower one, layer-specific metadata is added to help aid transmission
	* Application --> Transport
		- UDP or TCP headers are added, including network port information
	* Transport --> Network
		- data (including transport headers) is packaged into IP packets
	* Network --> Link
		- packets (including IP and transport headers) are packaged into ethernet frames
		
Data Decapsulation
- when data crosses back up a layer, the packaging for the lower layer is removed




1/16/18

Aim: Cisco in an hour 3: In 3-D

Internet Layer
- IP Packets
	* IPv4 Packet format
		- header: 12B
		- source: 4B
			* IPv4 addresses
		- destination: 4B
			* IPv4 addresses
		- data
			* MTU is 65535 bytes
- Routing
	* Routers may break IPV4 packets into fragments
	* When a router receives a packet, it has 2 options:
		1. Send that packet to the attached local network
		2. Forward that packet to a different router
- IPv4/IPv6 differences
	* Address space
		- 2^32 / 2^128
	* Packet format
		- in addition to address size change, IPv6 packet headers have less information. They do not include a checksum or fragment information.
	* MTU
		- IPv6 can allot for an MTU of 2^32 (there are called jumbograms)
	* IPv6 puts more work onto Link layer devices and individual hosts (computers)
		- IPv6 does not fragment packets at all, relying on other devices to potentially take advantage of jumbograms
		- IPv6 has no checksum, assuming Link layer devices and hosts will check for data integrity if needed
		

1/12/18

Aim: Cisco in an hour 2: Electric Boogaloo

Link Layer
- in order for the data to be sent between computers:
	* each computer needs a unique address (MAC Address)
	* the data needs to be sent in a standardized format (Frames)
	* MAC (Media Access Control) Address
		- 6 Byte Hex address: 2a:00:1e:b9:70:f6
		- MAC addresses only need to be unique on the same local network
	* Ethernet Frames
		- each frame has the following format:
			* prefix: 8B
				- 10101010 x7 + 10101011
			* dest: 6B
				- MAC addresses
			* source: 6B
				- MAC addresses
			* type: 2B
			* data:
				- MTU (Maximum Transmission Unit) of 1500B
			* checksum: 4B
				- ensures data integrity
				
Internet Layer
- transmission of data between two separate networks
- major features of this layer are addressing and routing
- routers are physical devices used to connect different local networks
- Internet layer traffic ignores the specifics of link layer traffic
- IP Packets
	* data sent over the internet layer is formatted into IP packets
		- IPv4 packet header
			* type: 2B
				- type: IPv4 / v6, length of header
			* size: 2B
				- total size of the packet
			* fragment info: 4B
				- full payloads may be broken into multiple fragments. Each packet will count the number of fragments and its individual fragment number.
			* ttl: 1B
				- (time to live):
					* maximum number of hops a packet can make before reaching its destination
			* protocol: 1B
				- TCP / UDP
			* header checksum: 2B
				- only a checksum of the header, not the full packet

	
1/11/18

Aim: Cisco in an hour

Layer Models of Networking
- Due to the complexity of network communications, the topic is often conceptualized into distinct layers so people can work on specific components rather than everything at once
- The bottom layer is the most concrete, with each subsequent layer becoming more abstract (relying less on the physical connections and more on code)
- There are various competing models, including the OSI (Open Systems Interconnections) and TCP/IP Models
- TCP/IP Model Layers
	1. Application
	2. Transport
	3. Internet
	4. Link
	
Link Layer
- point to point transmission between devices on the same (local) network
- combines physically connecting computers with basic addressing and transmission protocols
- physical connection
	* how to transmit bits between two computers
- a brief history of physical connections
	* Thicknet
		- a single coaxial cable runs along the network
		- "vampire taps" cut into the cable and connect to a computer
	* Thinnet
		- a single coaxial cable runs along the network (thinner)
		- T-Connectors connect computers to the main cable
	* Thin/Thicknet network topology
		- connection more lost each time a computer/network is added
	* Token Ring
		- each computer is connected in a ring to each other
		- only one computer has command of network resources at a time. This is called "having the token".
		- the network sends a "token" throughout the ring, which contains the identity of the ocmputer allowed to use the network. All other computers must wait to use the network.
	* Ethernet
		- multiple computers connect to a single hub or switch
		- Hub
			* broadcasts the data to all the computers
		- Switch
			* sends data to a specific computer

1/08/18

Aim: Stop. Collaborate, and listen

accept (server only) <sys/socket.h>
- accept the next client in the queue of a socket in the listen state
- used for stream sockets
- performs the server side of the 3 way handshake
- creates a new socket for communicating with the client, the listening socket is not modified
- returns a descriptor to the new socket
- blocks until a connection attempt is made
- accept(socket descriptor, address, address length)
	* socket descriptor
		- descriptor for the listening socket
	* address
		- pointer to a struct sockaddr_storage that will contain information about the new socket after accept succeeds
	* address length
		- pointer to a variable that will contain the size of the new socket address after accept succeeds

Using listen and accept
	// create socket
	int sd;
	sd = socket(AF_INET, SOCK_STREAM, 0);
	
	// use getaddrinfo and bind
	listen(sd, 10);
	
	int client_socket;
	socklen_t sock_sizel
	struct sockaddr_storage client_address;
	
	client_socket = accept(sd, (struct sockaddr *)&client_address, &sock_size);
	
connect (client only) <sys/socket.h> <sys/types.h>
- connect to a socket currently in the listening state
- used for stream sockets
- performs the client side of the 3 way handshake
- binds the socket to an address and port
- blocks until a connection is made (or fails)
- connect(socket descriptor, address, address length)
	* socket descriptor
		- descriptor for the socket
	* address
		- pointer to a struct sockaddr representing the address
	* address length
		- size of the address, in bytes
	* address and address length can be retrieved from getadrinfo()
	* note that the arguments mirror those of bind()
	
Using connect
	// create socket
	int sd;
	sd = socket(AF_INET, SOCk_STREAM, 0);
	
	struct addrinfo * hints, * results;
	// use get addrinfo (not shown)
	
	connect(sd, results->ai_addr, results->ai_addrlen);


1/05/18

Aim: Stop. Collaborate, and listen

To use a socket
1. create the socket
2. bind it to an address and port (server)
3. listen and accept (server) or connect (client)
4. send/receive data
	
socket <sys/socket.h>
- creates a socket
- returns a socket descriptor (int that works like a file descriptor)
- socket(domain, type, protocol)
	* domain: type of address
		- AF_INET or AF_INET6
	* type
		- SOCK_STREAM or SOCK_DGRAM
	* protocol: combination of domain and type settings
		- If set to 0 the OS will set to correct protocol (TCP or UDP)
	* example:
		- int sd = socket(AF_INET, SOCK_STREAM, 0);
	
System library calls use a struct addrinfo to represent network addresses (containing informationlike IP address, port, protocol...)
	
struct addrinfo

	.ai_family
		AF_INET: IPv4
		AF_INET6: IPv6
		AF_UNSPEC: IPc4 or IPv6
		
	.ai_socktype
		SOCK_STREAM
		SOCK_DGRAM
		
	.ai_flags
		AI_PASSIVE: automatically set to any incoming IP address
		
	.ai_addr
		Pointer to a struct sockaddr containing the IP address
		
	.ai_addrlen
		Size of the adress in bytes
		
getaddrinfo <sys/types.h> <sys/socket.h> <netdb.h>
- lookup information about the desired network address and get one or more matching struct addirinfo entries
- getaddrinfo(node, service, hints, results);
	* node
		- string containing an IP address or hostname to lookup
		- if NULL, use the local machine's IP address
	* service
		- string with a port number or service name (if the service is in /etc/services)
	* hints
		- pointer to a struct addrinfo used to provide settings for the lookup (type of address, etc.)
	* results
		- pointer to a struct addrinfo that will be a linked list containing entries for each matching address
		- getaddrinfo will allocate memory for these structs
		
Using getaddrinfo
- struct addrinfo * hints, * results;
- hints = (strct addrinfo *)calloc(1,sizeof(struct addrinfo));
- hints->ai_family = AF_INET;
- hints->ai_socktype = SOCK_STREAM; // TCP socket
- hints->ai_flags = AI_PASSIVE; // only needed on server
- getaddrinfo(NULL, "80", hints, &results); // server sets node to NULL
- //client: getaddrinfo("149.89.150.100", "9845", hints, &results);
- //do stuff...
	free(hints)
	freeaddrinfo(results)
	
bind (server only) <sys/socket.h>
- binds the socket to an address and port
- returns 0 (success) or -1 (failure)
- bind(socket descriptor, address, address length)
	* socket descriptor
		- return value of socket
	* address
		- pointer to a struct sockaddr representing the address
	* address length
		- size of the address, in bytes
	* address and address length can be retrieved from getaddrinfo

Using bind
- //create socket
	int sd;
	sd = socket(AF_INET, SOCK_STREAM, 0);
	
	struct addrinfo * hints, * results;
	// use getaddrinfo (not shown)
	
	bind(sd, results->ai_addr, results->ai_addrlen);
	
listen (server only) <sys/socket.h>
- set a socket to passively await a connection
- needed for stream sockets
- does not block
- listen (socket descriptor, backlog)
	* socket descriptor
		- return value of socket
	* backlog
		- number of connections that can be queued up
		- depending on the protocol, this may not do much
	
	
1/03/18

Aim: Socket to Me

Network Ports  
- Allow a single computer to run multiple services.  
- A socket combines an IP address and port.  
  
Each computer has 2^16 (65,536) ports.   
Some ports are reserved for specific services.
	* 80: http  
	* 22: ssh  
	* 443: ssl

You can select any port, as long as it won't conflict with a service running on the desired computer.   
	* ports < 1024 are reserved and should generally not be used
	*	/etc/services will have a list of registered ports for your local system

Network Connection Types
- Stream Sockets  
	* Reliable 2 way communication.  
	* Must be connected on both ends.  
	* Data is received in the order it is sent. (not as easily done as it sounds)  
	* Most use the Transmission Control Protocol (TCP).  

- Datagram Sockets  
	* "Connectionless" - an established connection is not required.  
	* Data sent may be received out of order (or not at all).  
	* Uses the User Datagram Protocol. 
	
	
1/02/18	
	
Aim: Socket to Me

Socket
- A connection between 2 programs over a *network*.  
- A socket corresponds to an IP (internet protocol) Address / Port pair.

To use a socket
1. create the socket (kind of like creating the WKP)
2. bind it to an address and port
3. listen (creator) / initiate a connection (client)
4. send / receive data

IP Addresses
- All devices connected to the internet have an IP address.  
- IP addresses come in 2 flavors, IPv4 (the main standard) and IPv6 (what should be the main standard).  
- Addresses are allocated in blocks to make routing easier.

**IPv4:** 2 byte addresses of the form `[0-255].[0-255].[0-255].[0-255]`  
- Each group is called an *octet*.  
- At most there are 2^32, or ~4.3 billion IPv4 addresses.

**IPv6:** 16 byte addresses of the form: [0-ffff]:[0-ffff]:[0-ffff]:[0-ffff]:[0-ffff]:[0-ffff]:[0-ffff]:[0-ffff]  
- Each group is known as a *hextet* (although not as standard as the octet).  
- Leading 0s are ignored.  

Any number of consecutive all 0 hextets can be replaced with ::

For example:  
0000 : 0000 : 0000 : 0000 : 004f : 13c2 : 0009 : a2d2  
can also be written as  
:: 4f : 13c2 : 9 : a2d2
